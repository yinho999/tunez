defmodule TunezWeb.Albums.FormLive do
  # ASHPHOENIX FORM WITH RELATIONSHIPS
  # ===================================
  # This LiveView demonstrates advanced AshPhoenix features:
  # - Form generation with relationship data (artist_id)
  # - Nested forms for related resources (tracks)
  # - Real-time validation with relationships
  # - Managing belongs_to relationships in forms

  use TunezWeb, :live_view
  alias Tunez.Music, warn: false
  require Logger

  # MOUNT FOR EDIT MODE
  # ===================
  # Editing an existing album - needs to load both album and its artist
  def mount(%{"id" => album_id}, _session, socket) do
    # ASH: Load the album using generated function
    album = Music.get_album_by_id!(album_id, load: [:artist])

    # ASHPHOENIX: Generate update form
    # This form will have the album's current data pre-populated
    # Note: Music.form_to_update_album would need to be defined in forms block
    # Alternative: AshPhoenix.Form.for_update(album, :update)
    form = Music.form_to_update_album(album)

    socket =
      socket
      # Convert AshPhoenix.Form to Phoenix.HTML.Form
      |> assign(:form, to_form(form))
      |> assign(:artist, album.artist)
      |> assign(:page_title, "Update Album")

    {:ok, socket}
  end

  # MOUNT FOR CREATE MODE
  # =====================
  # Creating a new album for a specific artist
  def mount(%{"artist_id" => artist_id}, _session, socket) do
    # ASH: Load the artist this album will belong to
    artist = Music.get_artist_by_id!(artist_id)

    # ASHPHOENIX: Generate create form with artist_id
    # Music.form_to_create_album is generated by:
    #   forms do
    #     form(:create_album, args: [:artist_id])
    #   end
    #
    # This pre-fills the artist_id in the form, establishing the relationship
    # The artist_id becomes a hidden field that Ash uses to create the belongs_to link
    form = Music.form_to_create_album(artist.id)

    socket =
      socket
      |> assign(:form, to_form(form))
      |> assign(:artist, artist)
      |> assign(:page_title, "New Album")

    {:ok, socket}
  end

  # RENDER FUNCTION
  # ===============
  # Form with relationship display and nested track inputs
  def render(assigns) do
    ~H"""
    <Layouts.app {assigns}>
      <.header>
        <.h1>{@page_title}</.h1>
      </.header>

      <.simple_form
        :let={form}
        id="album_form"
        as={:form}
        for={@form}
        phx-change="validate"
        phx-submit="save"
      >
        <!-- RELATIONSHIP DISPLAY -->
        <!-- Artist is shown but disabled - it can't be changed after creation -->
        <!-- This enforces the business rule that albums don't switch artists -->
        <.input name="artist_id" label="Artist" value={@artist.name} disabled />

        <!-- ALBUM ATTRIBUTES -->
        <!-- These map to the Album resource's attributes -->
        <div class="sm:flex gap-8 space-y-8 md:space-y-0">
          <div class="sm:w-3/4"><.input field={form[:name]} label="Name" /></div>
          <div class="sm:w-1/4">
            <.input field={form[:year_released]} label="Year Released" type="number" />
          </div>
        </div>
        <.input field={form[:cover_image_url]} label="Cover Image URL" />

        <:actions>
          <.button type="primary">Save</.button>
        </:actions>
      </.simple_form>
    </Layouts.app>
    """
  end

  # NESTED FORM COMPONENT (Currently not fully implemented)
  # ========================================================
  # This demonstrates how nested forms would work with AshPhoenix
  def track_inputs(assigns) do
    ~H"""
    <.h2>Tracks</.h2>

    <table class="w-full">
      <thead class="border-b border-zinc-100">
        <tr>
          <th class=""></th>
          <th class="text-left font-medium text-sm pb-1 px-3">Name</th>
          <th class="text-left font-medium text-sm pb-1 px-3" colspan="2">Duration</th>
        </tr>
      </thead>
      <tbody phx-hook="trackSort" id="trackSort">
        <!-- ASHPHOENIX NESTED FORMS -->
        <!-- inputs_for creates nested form inputs for has_many relationships -->
        <!-- This would work if Album has_many :tracks configured -->
        <.inputs_for :let={track_form} field={@form[:tracks]}>
          <tr data-id={track_form.index}>
            <td class="px-3 w-20">
              <.input field={track_form[:order]} type="number" />
            </td>
            <td class="px-3">
              <label for={track_form[:name].id} class="hidden">Name</label>
              <.input field={track_form[:name]} />
            </td>
            <td class="px-3 w-36">
              <label for={track_form[:duration_seconds].id} class="hidden">Duration</label>
              <.input field={track_form[:duration_seconds]} />
            </td>
            <td class="w-12">
              <!-- ASHPHOENIX: Remove nested form item -->
              <!-- phx-value-path passes the form path for removal -->
              <.button_link
                phx-click="remove-track"
                phx-value-path={track_form.name}
                kind="error"
                size="xs"
                inverse
              >
                <span class="hidden">Delete</span>
                <.icon name="hero-trash" class="size-5" />
              </.button_link>
            </td>
          </tr>
        </.inputs_for>
      </tbody>
    </table>

    <!-- ASHPHOENIX: Add new nested form item -->
    <.button_link phx-click="add-track" kind="primary" size="sm" inverse>
      Add Track
    </.button_link>
    """
  end

  # ASHPHOENIX VALIDATION HANDLER
  # ==============================
  # Real-time validation for album and nested track data
  def handle_event("validate", %{"form" => form_data}, socket) do
    # ASHPHOENIX: Validates the entire form including nested tracks
    # AshPhoenix.Form.validate handles:
    # - Album attribute validation (name required, year_released required)
    # - Relationship validation (artist_id must exist)
    # - Nested track validation if present
    socket = update(socket, :form, fn form -> AshPhoenix.Form.validate(form, form_data) end)

    {:noreply, socket}
  end

  # ASHPHOENIX SUBMISSION HANDLER
  # ==============================
  # Submits album with relationship data
  def handle_event("save", %{"form" => form_data}, socket) do
    # ASHPHOENIX: Submit form with relationship
    # This will:
    # 1. Validate all data including artist_id
    # 2. Create/update the album with the belongs_to relationship
    # 3. Handle any nested track data if present
    # 4. Run database constraints (foreign key checks)
    case AshPhoenix.Form.submit(socket.assigns.form, params: form_data) do
      {:ok, album} ->
        # Success: Album saved with relationship intact
        socket =
          socket
          |> put_flash(:info, "Album saved successfully")
          # Navigate back to the artist page showing all albums
          |> push_navigate(to: ~p"/artists/#{album.artist_id}")

        Logger.info("Album saved successfully: #{inspect(album)}")
        {:noreply, socket}

      {:error, form} ->
        # Failure: Could be validation errors or relationship constraints
        socket =
          socket |> put_flash(:error, "Could not save album data") |> assign(:form, to_form(form))

        Logger.info("Could not save album data: #{inspect(form)}")
        {:noreply, socket}
    end
  end

  # NESTED FORM HANDLERS (Stubs for future implementation)
  # =======================================================
  # These would use AshPhoenix.Form functions for nested forms

  def handle_event("add-track", _params, socket) do
    # TODO: Implement with AshPhoenix.Form.add_form
    # Example:
    # form = AshPhoenix.Form.add_form(socket.assigns.form, [:tracks])
    # socket = assign(socket, :form, to_form(form))
    {:noreply, socket}
  end

  def handle_event("remove-track", %{"path" => _path}, socket) do
    # TODO: Implement with AshPhoenix.Form.remove_form
    # Example:
    # form = AshPhoenix.Form.remove_form(socket.assigns.form, path)
    # socket = assign(socket, :form, to_form(form))
    {:noreply, socket}
  end

  def handle_event("reorder-tracks", %{"order" => _order}, socket) do
    # TODO: Implement with AshPhoenix.Form.sort_forms
    # Example:
    # form = AshPhoenix.Form.sort_forms(socket.assigns.form, [:tracks], order)
    # socket = assign(socket, :form, to_form(form))
    {:noreply, socket}
  end
end
